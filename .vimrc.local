iabbrev rd require 'ruby-debug'; Debugger.start; debugger

nmap <silent> <Leader>g :!/usr/local/bin/ctags -R --languages=Ruby,C,C++ -f .tags --langmap='ruby:+.rake.builder.haml'<CR>
set tags=.tags
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y%{exists('g:loaded_rvm')?rvm#statusline():''}%=%-16(\ %l,%c-%v\ %)%P

set nu
set nobackup
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autowrite

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set et ts=%d sw=%d tw=%d ft=%s :", &tabstop, &shiftwidth, &textwidth, &ft)
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" stolen from elsewhere
autocmd CursorHold,BufWritePost,BufReadPost,BufLeave *
            \ if isdirectory(expand("<amatch>:h")) | let &swapfile = &modified | endif

autocmd BufNewFile,BufRead *.haml             set ft=haml
autocmd BufNewFile,BufRead *.feature,*.story  set ft=cucumber
autocmd BufRead * if ! did_filetype() && getline(1)." ".getline(2).
            \ " ".getline(3) =~? '<\%(!DOCTYPE \)\=html\>' | setf html | endif

autocmd FileType javascript,coffee      setlocal et sw=2 sts=2 isk+=$
autocmd FileType html,xhtml,css,scss    setlocal et sw=2 sts=2
autocmd FileType eruby,yaml,ruby        setlocal et sw=2 sts=2
autocmd FileType cucumber               setlocal et sw=2 sts=2
autocmd FileType gitcommit              setlocal spell
autocmd FileType gitconfig              setlocal noet sw=8
autocmd FileType ruby                   setlocal comments=:#\  tw=79
autocmd FileType sh,csh,zsh             setlocal et sw=2 sts=2
autocmd FileType vim                    setlocal et sw=2 sts=2 keywordprg=:help
autocmd FileType gem                    setlocal ft=ruby

autocmd Syntax   css  syn sync minlines=50
autocmd FileType css set fdm=marker fmr={,}

au! BufRead,BufNewFile *.json set filetype=json

augroup json_autocmd
  autocmd!
  autocmd FileType json set autoindent
  autocmd FileType json set formatoptions=tcq2l
  autocmd FileType json set textwidth=78 shiftwidth=2
  autocmd FileType json set softtabstop=2 tabstop=8
  autocmd FileType json set expandtab
  autocmd FileType json set foldmethod=syntax
augroup END


set hlsearch
nmap <silent> <Leader>h :%s/require 'test_helper'/require File.expand_path(File.dirname(__FILE__) + "\/..\/test_helper")/g
cmap w!! %!sudo tee > /dev/null % # force save with sudo
cnoreabbrev  ws %s/\s\+$//g
cnoreabbrev  squash %s/\s\{4\}/  /g
cnoreabbrev  nf set nofoldenable
"set clipboard=exclude:.*

" customize rails.vim
autocmd User Rails Rnavcommand -suffix=.rb            factory    test/factories spec/factories -glob=**/* -default=model()
autocmd User Rails Rnavcommand -suffix=_fabricator.rb fabricator test/fabricators spec/fabricators -glob=**/* -default=model()
autocmd User Rails Rnavcommand -suffix=_job.rb        job        app/jobs
autocmd User Rails Rnavcommand -suffix=.sass          sass       app/stylesheets
autocmd User Rails Rnavcommand -suffix=.less          less       app/stylesheets
autocmd User Rails Rnavcommand -suffix=.coffee        coffee     app/coffeescripts
autocmd User Rails Rnavcommand -suffix=.rb            lib        app/lib
autocmd User Rails Rnavcommand -suffix=.feature       feature    features
autocmd User Rails Rnavcommand -suffix=_steps.rb      steps      features/step_definitions

au FocusLost * :wa
"au FocusLost * :stopinsert

let g:session_autoload = 1
let g:session_default_to_last = 1
let g:session_autosave = 1

" supertab, omnicomplete
"filetype plugin on
"set ofu=syntaxcomplete#Complete
"let g:SuperTabDefaultCompletionType = "context"

let g:gist_clip_command = 'pbcopy'
let g:gist_open_browser_after_post = 1
let g:gist_detect_filetype = 1

let g:ruby_debugger_progname = 'mvim'

let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax

"if has("gui_macvim")
"    macmenu &File.New\ Tab key=<nop>
"    map <D-t> <Plug>PeepOpen
"end

" SHORTCUT KEY MAPPINGS """""""""""""""""""
" from Sam Coward
" https://github.com/idoru/idoru-vim-config/blob/master/vimrc_template
"
"ctrl+alt+f for ack current word in command mode
map  :call AckGrep()<CR>
function! AckGrep()
  let command = "ack ".expand("<cword>")
  cexpr system(command)
  cw
endfunction

"prev/next in quickfix file listing (e.g. search results)
map <M-D-Down> :cn<CR>
map <M-D-Up> :cp<CR>

"select open file, MRU sorted
map <D-e> :FufBuffer<CR>

"open file
map <D-N> :FufFile<CR>

"opt-cmd-arrows [next & previous open files]
map <M-D-Left> :bp<CR>
map <M-D-Right> :bn<CR>

"indent/unindent visual mode selection with tab/shift+tab
vmap <tab> >gv
vmap <s-tab> <gv

"Undo/Redo using undo tree with cmd-z/cmd-shift-z
map <D-z> :earlier 1<CR>
map <D-Z> :later 1<CR>

"file tree browser - backslash
map \ :NERDTreeToggle<CR>

"simple comment/uncomment visual selection with cmd+/
vmap <silent> <D-/> :call CommentOutLine()<CR>
function! CommentOutLine()
  let ext = expand("%:e")

  if ext == "rb" || ext == "sh"
    let comment_prefix = "#"
  elseif ext == "c" || ext == "cpp" || ext == "h" || ext == "h" || ext == "m" || ext == "mm"
    let comment_prefix = "//"
  endif
  let line = getline('.')
  let pattern = "^".comment_prefix
  if line =~ pattern
    call setline(".", substitute(line, pattern, "", ""))
  else
    call setline(".", substitute(line, "^", comment_prefix, ""))
  endif
endfunction

"strip trailing whitespace on save for code files
"cocoa
autocmd BufWritePre *.m,*.h,*.c,*.mm,*.cpp,*.hpp :%s/\s\+$//e
"rails
autocmd BufWritePre *.rb,*.yml,*.js,*.css,*.less,*.sass,*.html,*.xml,*.erb,*.haml :%s/\s\+$//e
"misc
autocmd BufWritePre *.java,*.php :%s/\s\+$//e

" from vimcasts.org
"
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv
nmap gV `[v`]

