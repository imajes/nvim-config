iabbrev rdebug require 'ruby-debug'; Debugger.start; Debugger.settings[:autoeval] = 1; Debugger.settings[:autolist] = 1; debugger
iabbrev rd require 'ruby-debug'; Debugger.start; Debugger.settings[:autoeval] = 1; Debugger.settings[:autolist] = 1; debugger

nmap <silent> <Leader>t :!/usr/local/bin/ctags -R --languages=Ruby,C,C++ -f .tags --langmap='ruby:+.rake.builder.haml'<CR>
set tags=.tags

set nu
set nobackup
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autowrite

" rubies
autocmd BufNewFile,BufRead Gemfile set ft=ruby
autocmd FileType css set fdm=marker fmr={,}

set hlsearch
nmap <silent> <Leader>h :%s/require 'test_helper'/require File.expand_path(File.dirname(__FILE__) + "\/..\/test_helper")/g
cnoreabbrev  ws %s/\s\+$//g
cnoreabbrev  squash %s/\s\{4\}/  /g
"set clipboard=exclude:.*

au FocusLost * :wa

let g:gist_clip_command = 'pbcopy'
let g:gist_open_browser_after_post = 1
let g:gist_detect_filetype = 1

let g:ruby_debugger_progname = 'mvim'

let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax

"if has("gui_macvim")
"    macmenu &File.New\ Tab key=<nop>
"    map <D-t> <Plug>PeepOpen
"end

" SHORTCUT KEY MAPPINGS """""""""""""""""""
" from Sam Coward
" https://github.com/idoru/idoru-vim-config/blob/master/vimrc_template
"
"ctrl+alt+f for ack current word in command mode
map  :call AckGrep()<CR>
function! AckGrep()
  let command = "ack ".expand("<cword>")
  cexpr system(command)
  cw
endfunction

"prev/next in quickfix file listing (e.g. search results)
map <M-D-Down> :cn<CR>
map <M-D-Up> :cp<CR>

"select open file, MRU sorted
map <D-e> :FufBuffer<CR>

"open file
map <D-N> :FufFile<CR>

"opt-cmd-arrows [next & previous open files]
map <M-D-Left> :bp<CR>
map <M-D-Right> :bn<CR>

"indent/unindent visual mode selection with tab/shift+tab
vmap <tab> >gv
vmap <s-tab> <gv

"Undo/Redo using undo tree with cmd-z/cmd-shift-z
map <D-z> :earlier 1<CR>
map <D-Z> :later 1<CR>

"file tree browser - backslash
map \ :NERDTreeToggle<CR>

"simple comment/uncomment visual selection with cmd+/
vmap <silent> <D-/> :call CommentOutLine()<CR>
function! CommentOutLine()
  let ext = expand("%:e")

  if ext == "rb" || ext == "sh"
    let comment_prefix = "#"
  elseif ext == "c" || ext == "cpp" || ext == "h" || ext == "h" || ext == "m" || ext == "mm"
    let comment_prefix = "//"
  endif
  let line = getline('.')
  let pattern = "^".comment_prefix
  if line =~ pattern
    call setline(".", substitute(line, pattern, "", ""))
  else
    call setline(".", substitute(line, "^", comment_prefix, ""))
  endif
endfunction

"strip trailing whitespace on save for code files
"cocoa
autocmd BufWritePre *.m,*.h,*.c,*.mm,*.cpp,*.hpp :%s/\s\+$//e
"rails
autocmd BufWritePre *.rb,*.yml,*.js,*.css,*.less,*.sass,*.html,*.xml,*.erb,*.haml :%s/\s\+$//e
"misc
autocmd BufWritePre *.java,*.php :%s/\s\+$//e


